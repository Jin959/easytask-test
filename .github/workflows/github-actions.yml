# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        
    - name: make application.yml
      run: |
        cd ./src/main/resources
        touch ./application.yml
        echo "${{ secrets.APPLICATION_YML }}" > ./application.yml    
        
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build Spring Application with Gradle
      run: ./gradlew build -x test
    
    # Docker image Build
    - name: Docker image build
      run: |
        docker build -t easytask-app .
        docker tag easytask-app ${{ secrets.DOCKER_REPO }}
        
    - name: Docker login 
      uses: docker/login-action@v2
      with: 
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
        
    - name: Docker Hub push
      run: docker push ${{ secrets.DOCKER_REPO }}
      
    # GET GitHub IP
    - name: get GitHub IP 
      id: ip
      uses: haythem/public-ip@v1.2
      
    # AWS IAM 권한 취득
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with: 
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: ap-northeast-2
    
    # Add github ip to AWS
    - name: Add GitHub IP to AWS
      run: |
        aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port ${{ secrets.EC2_PORT }} --cidr ${{ steps.ip.outputs.ipv4 }}/32
    
    - name: AWS EC2 Connection & Deploy after Docker Login, Pull
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_KEY }} 
        port: ${{ secrets.EC2_PORT }}
        timeout: 60s
        script: |
          sudo docker stop $(docker ps -aq)
          sudo docker network prune -f
          sudo docker container prune -f
          sudo docker docker rmi ${{ secrets.DOCKER_REPO }}
          sudo docker volume prune -f
          sudo cat ${{ secrets.DOCKER_KEY_PATH }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          suod docker pull ${{ secrets.DOCKER_REPO }}
          sudo docker compose -f ${{ secrets.DOCKER_COMPOSE_FILE }} up --build
          sudo docker image prune -f
    
    - name: Remove IP FROM security group
      run: |
        aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port ${{ secrets.EC2_PORT }} --cidr ${{ steps.ip.outputs.ipv4 }}/32
